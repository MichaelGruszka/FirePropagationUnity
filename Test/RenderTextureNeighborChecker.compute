#pragma kernel CSMain

Texture3D<float4> InputTexture : register(t0);
RWTexture3D<float4> OutputTexture : register(u0);

[numthreads(8, 8, 8)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    uint3 texSize;
    InputTexture.GetDimensions(texSize.x, texSize.y, texSize.z);

    float4 centerPixel = InputTexture[id];

    int3 neighborOffsets[26] = {
        int3(-1, -1, -1), int3(0, -1, -1), int3(1, -1, -1),
        int3(-1, 0, -1), int3(0, 0, -1), int3(1, 0, -1),
        int3(-1, 1, -1), int3(0, 1, -1), int3(1, 1, -1),
        int3(-1, -1, 0), int3(0, -1, 0), int3(1, -1, 0),
        int3(-1, 0, 0), int3(1, 0, 0),
        int3(-1, 1, 0), int3(0, 1, 0), int3(1, 1, 0),
        int3(-1, -1, 1), int3(0, -1, 1), int3(1, -1, 1),
        int3(-1, 0, 1), int3(0, 0, 1), int3(1, 0, 1),
        int3(-1, 1, 1), int3(0, 1, 1), int3(1, 1, 1)
    };

    bool hasAlphaNeighbor = false;

    for (int i = 0; i < 26 && !hasAlphaNeighbor; i++) {
        int3 neighborId = id + neighborOffsets[i];
        if (all(neighborId >= 0) && all(neighborId < texSize)) {
            float4 neighborPixel = InputTexture[neighborId];
            if (neighborPixel.a >= 1.0) {
                hasAlphaNeighbor = true;
            }
        }
    }

    float4 outputColor = centerPixel;

    if (hasAlphaNeighbor && any(outputColor.rgb != 0)) {
        outputColor.a = 1.0;
    }

    OutputTexture[id] = outputColor;
}